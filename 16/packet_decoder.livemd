<!-- livebook:{"persist_outputs":true} -->

# DÃ­a 16: Packet Decoder

## Input data

<!-- livebook:{"livebook_object":"cell_input","name":"data","type":"textarea","value":"C200B40A82,04005AC33890,880086C3E88112,CE00C43D881120,D8005AC2A8F0,F600BC2D8F,9C005AC2F8F0,9C0141080250320F1802104A08,0054FEC8C54DC02295D5AE9B243D2F4FEA154493A43E0E60084E61CE802419A95E38958DE4F100B9708300466AB2AB7D80291DA471EB9110010328F820084D5742D2C8E600AC8DF3DBD486C010999B44CCDBD401C9BBCE3FD3DCA624652C400007FC97B113B8C4600A6002A33907E9C83ECB4F709FD51400B3002C4009202E9D00AF260290D400D70038400E7003C400A201B01400B401609C008201115003915002D002525003A6EB49C751ED114C013865800BFCA234E677512952E20040649A26DFA1C90087D600A8803F0CA1AC1F00042A3E41F8D31EE7C8D800FD97E43CCE401A9E802D377B5B751A95BCD3E574124017CF00341353E672A32E2D2356B9EE79088032AF005E7E8F33F47F95EC29AD3018038000864658471280010C8FD1D63C080390E61D44600092645366202933C9FA2F460095006E40008742A8E70F80010F8DF0AA264B331004C52B647D004E6EEF534C8600BCC93E802D38B5311AC7E7B02D804629DD034DFBB1E2D4E2ACBDE9F9FF8ED2F10099DE828803C7C0068E7B9A7D9EE69F263B7D427541200806582E49725CFA64240050A20043E25C148CC600F45C8E717C8010E84506E1F18023600A4D934DC379B9EC96B242402504A027006E200085C6B8D51200010F89913629A805925FBD3322191A1C45A9EACB4733FBC5631A210805315A7E3BC324BCE8573ACF3222600BCD6B3997E7430F004E37CED091401293BEAC2D138402496508873967A840E00E41E99DE6B9D3CCB5E3F9A69802B2368E7558056802E200D4458AF1180010A82B1520DB80212588014C009803B2A3134DD32706009498C600664200F4558630F840188E11EE3B200C292B59124AFF9AE6775ED8BE73D4FEEFFAD4CE7E72FFBB7BB49005FB3BEBFA84140096CD5FEDF048C011B004A5B327F96CC9E653C9060174EA0CF15CA0E4D044F9E4B6258A5065400D9B68"} -->

```elixir
inputs =
  IO.gets("data")
  |> String.trim_trailing()
  |> String.split(",")
  |> Enum.map(fn input ->
    data =
      input
      |> String.to_integer(16)
      |> Integer.to_string(2)

    # nos aseguramos de que la lÃ­nea contenga todos los bits de los bytes
    String.pad_leading(data, String.length(input) * 4, "0")
  end)
```

```output
["1100001000000000101101000000101010000010", "000001000000000001011010110000110011100010010000",
 "10001000000000001000011011000011111010001000000100010010",
 "11001110000000001100010000111101100010000001000100100000",
 "110110000000000001011010110000101010100011110000", "1111011000000000101111000010110110001111",
 "100111000000000001011010110000101111100011110000",
 "10011100000000010100000100001000000000100101000000110010000011110001100000000010000100000100101000001000",

```

## Puzzle 1

```elixir
defmodule Puzzle do
  def parse(string), do: parse(string, [])

  def parse(<<version::binary-size(3), "100", rest::binary()>>, acc) do
    {num, rest} = parse_literal(rest)
    version = String.to_integer(version, 2)
    {rest, [{:literal, version, num} | acc]}
  end

  def parse(
        <<
          version::binary-size(3),
          operation::binary-size(3),
          # length_type_id
          "0",
          total_length::binary-size(15),
          rest::binary()
        >>,
        acc
      ) do
    total_length = String.to_integer(total_length, 2)
    <<subpackets::binary-size(total_length), rest::binary()>> = rest
    {_, parsed_data} = parse_subpackets(subpackets)
    version = String.to_integer(version, 2)
    {rest, [{:operator, version, to_operation(operation), parsed_data} | acc]}
  end

  def parse(
        <<
          version::binary-size(3),
          operation::binary-size(3),
          # length_type_id
          "1",
          total_length::binary-size(11),
          rest::binary()
        >>,
        acc
      ) do
    total_length = String.to_integer(total_length, 2)
    {rest, parsed_data} = parse_n_subpackets(rest, total_length)
    version = String.to_integer(version, 2)
    {rest, [{:operator, version, to_operation(operation), parsed_data} | acc]}
  end

  defp parse_n_subpackets(string, n), do: parse_n_subpackets(string, n, [])
  defp parse_n_subpackets(string, 0, acc), do: {string, Enum.reverse(acc)}

  defp parse_n_subpackets(string, n, acc) do
    {rest, parsed_data} = parse(string, [])
    parse_n_subpackets(rest, n - 1, parsed_data ++ acc)
  end

  defp parse_subpackets(string), do: parse_subpackets(string, [])
  defp parse_subpackets(<<>>, acc), do: {<<>>, Enum.reverse(acc)}

  defp parse_subpackets(string, acc) do
    {rest, parsed_data} = parse(string, [])
    parse_subpackets(rest, parsed_data ++ acc)
  end

  defp parse_literal(string), do: parse_literal(string, 0)

  defp parse_literal(<<"1", bin_num::binary-size(4), rest::binary()>>, num) do
    parse_literal(rest, num * 0x10 + String.to_integer(bin_num, 2))
  end

  defp parse_literal(<<"0", bin_num::binary-size(4), rest::binary()>>, num) do
    {num * 0x10 + String.to_integer(bin_num, 2), rest}
  end

  def sum_versions(parsed_data), do: sum_versions(parsed_data, 0)
  def sum_versions([], sum), do: sum

  def sum_versions([{:operator, v, _operation, data} | rest], sum) do
    sum_versions(rest, v + sum_versions(data) + sum)
  end

  def sum_versions([{:literal, v, _num} | rest], sum) do
    sum_versions(rest, v + sum)
  end

  def apply_operations(operations), do: apply_operations(operations, [])

  defp apply_operations([], acc), do: acc

  defp apply_operations([op1 | rest], acc) do
    apply_operations(rest, [get_num(op1) | acc])
  end

  defp get_num({:operator, _v, f, data}), do: f.(data)
  defp get_num({:literal, _v, num}), do: num

  defp to_operation("000") do
    fn data -> Enum.reduce(data, 0, &(get_num(&1) + &2)) end
  end

  defp to_operation("001") do
    fn data -> Enum.reduce(data, 1, &(get_num(&1) * &2)) end
  end

  defp to_operation("010") do
    fn data -> Enum.reduce(data, nil, &min(get_num(&1), &2)) end
  end

  defp to_operation("011") do
    fn data -> Enum.reduce(data, 0, &max(get_num(&1), &2)) end
  end

  defp to_operation("101") do
    fn [op1, op2] -> to_num(get_num(op1) > get_num(op2)) end
  end

  defp to_operation("110") do
    fn [op1, op2] -> to_num(get_num(op1) < get_num(op2)) end
  end

  defp to_operation("111") do
    fn [op1, op2] -> to_num(get_num(op1) == get_num(op2)) end
  end

  defp to_num(true), do: 1
  defp to_num(false), do: 0
end

:ok
```

```output
:ok
```

## Sum of versions

```elixir
for data <- inputs do
  {_, parsed_data} = Puzzle.parse(data)
  Puzzle.sum_versions(parsed_data)
end
```

```output
[14, 8, 15, 11, 13, 19, 16, 20, 934]
```

## Apply operators

```elixir
for data <- inputs do
  {_, parsed_data} = Puzzle.parse(data)
  [result] = Puzzle.apply_operations(parsed_data)
  result
end
```

```output
[3, 54, 7, 9, 1, 0, 0, 1, 912901337844]
```
